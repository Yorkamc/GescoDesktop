// <auto-generated />
using System;
using Gesco.Desktop.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gesco.Desktop.Data.Migrations
{
    [DbContext(typeof(LocalDbContext))]
    [Migration("20250828154309_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Actividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EncargadoUsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstadoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashSync")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("HoraFin")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("HoraInicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("Actividades");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActividadCategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActividadId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoriaServicioId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActividadId");

                    b.HasIndex("CategoriaServicioId");

                    b.ToTable("ActividadCategorias");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Caja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Abierta")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActividadId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaApertura")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashSync")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumeroCaja")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OperadorUsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SupervisorUsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActividadId");

                    b.ToTable("Cajas");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CategoriaServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("CategoriasServicio");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CierreActividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActividadId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticulosAgotados")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticulosConStock")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CajasConDiferencias")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CerradaPor")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DuracionHoras")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProblemasReportados")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SupervisadaPor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalArticulosVendidos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalCajas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalTransacciones")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalUnidadesRestantes")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalVentas")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValorInventarioFinal")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValorMerma")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActividadId");

                    b.ToTable("CierresActividad");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CierreCaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CajaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CerradaPor")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("DiferenciaEfectivo")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EfectivoCalculado")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("EfectivoDeclarado")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaApertura")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MontoVentas")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProblemasReportados")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SinpesCalculado")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SupervisadaPor")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TarjetasCalculado")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalItemsVendidos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalTransacciones")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CajaId");

                    b.ToTable("CierresCaja");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ClaveActivacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoActivacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Expirada")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaExpiracion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaRevocacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaUtilizacion")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Generada")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GeneradaPor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpActivacion")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("LoteGeneracion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("RazonRevocacion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Revocada")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RevocadaPor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuscripcionesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsosActuales")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsosMaximos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Utilizada")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UtilizadaPorOrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UtilizadaPorUsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CodigoActivacion")
                        .IsUnique();

                    b.HasIndex("SuscripcionesId");

                    b.HasIndex("UtilizadaPorOrganizacionId");

                    b.ToTable("ClavesActivacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ColaSincronizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatosCambio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaProcesado")
                        .HasColumnType("TEXT");

                    b.Property<string>("Operacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Prioridad")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Procesado")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegistroId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TablaAfectada")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("ColaSincronizacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ComboArticulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticuloId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComboId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("ComboId");

                    b.ToTable("ComboArticulos");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ComboVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActividadId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioCombo")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActividadId");

                    b.ToTable("CombosVenta");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ConfiguracionSistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsEditable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NivelAcceso")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("admin");

                    b.Property<int?>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiereReinicio")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoValor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValorPorDefecto")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("ConfiguracionesSistema");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.DetalleTransaccionVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArticuloId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ComboId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsCombo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("TransaccionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("ComboId");

                    b.HasIndex("TransaccionId");

                    b.ToTable("DetallesTransaccionesVenta");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.EstadoActividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EstadosActividad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(4907),
                            Descripcion = "Actividad no iniciada",
                            Nombre = "Sin Iniciar"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(4912),
                            Descripcion = "Actividad en desarrollo",
                            Nombre = "En Curso"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(4915),
                            Descripcion = "Actividad completada",
                            Nombre = "Terminada"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(4920),
                            Descripcion = "Actividad cancelada",
                            Nombre = "Cancelada"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.EstadoSuscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PermiteUsoSistema")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EstadosSuscripcion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Descripcion = "Suscripción activa",
                            Nombre = "Activa",
                            PermiteUsoSistema = true
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Descripcion = "Suscripción suspendida",
                            Nombre = "Suspendida",
                            PermiteUsoSistema = false
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Descripcion = "Suscripción cancelada",
                            Nombre = "Cancelada",
                            PermiteUsoSistema = false
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.EstadoVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EstadosVenta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(5010),
                            Descripcion = "Venta pendiente de procesamiento",
                            Nombre = "Pendiente"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(5015),
                            Descripcion = "Venta completada exitosamente",
                            Nombre = "Completada"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(5018),
                            Descripcion = "Venta cancelada",
                            Nombre = "Cancelada"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.LogAuditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DatosAnteriores")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DatosNuevos")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RegistroId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tabla")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("LogsAuditoria");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Membresia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("LimiteUsuarios")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioAnual")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioMensual")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Membresias");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.MetodoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiereReferencia")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MetodosPago");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(5095),
                            Descripcion = "Pago en efectivo",
                            Nombre = "Efectivo",
                            RequiereReferencia = false
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(5100),
                            Descripcion = "Pago con tarjeta de crédito/débito",
                            Nombre = "Tarjeta",
                            RequiereReferencia = true
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(5104),
                            Descripcion = "Pago con SINPE Móvil",
                            Nombre = "SINPE Móvil",
                            RequiereReferencia = true
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("Modulos");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.MovimientoInventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticuloId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AutorizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadAnterior")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadPosterior")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("CostoUnitario")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<string>("Justificacion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("RealizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoMovimientoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TransaccionVentaId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("ValorTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("TipoMovimientoId");

                    b.HasIndex("TransaccionVentaId");

                    b.ToTable("MovimientosInventario");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CanalesEntrega")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreadaEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreadaPor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatosAdicionales")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaExpiracion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaLeida")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaProgramada")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Importante")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Leida")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Organizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CorreoContacto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonaAdquiriente")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonoContacto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Organizaciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            CorreoContacto = "demo@gesco.com",
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(4162),
                            Direccion = "San José, Costa Rica",
                            Nombre = "Organización Demo",
                            PersonaAdquiriente = "Administrador Demo",
                            TelefonoContacto = "2222-2222"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.PagoTransaccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<int>("MetodoPagoId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Monto")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ProcesadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcesadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransaccionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MetodoPagoId");

                    b.HasIndex("TransaccionId");

                    b.ToTable("PagosTransacciones");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ProductoCategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActividadCategoriaId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadActual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadAlerta")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadInicial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashSync")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActividadCategoriaId");

                    b.ToTable("ProductosCategorias");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(4670),
                            Descripcion = "Acceso completo al sistema",
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(4685),
                            Descripcion = "Acceso a ventas y caja",
                            Nombre = "Vendedor"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(4689),
                            Descripcion = "Supervisión de actividades",
                            Nombre = "Supervisor"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SecuenciaNumeracion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefijo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("SiguienteNumero")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("SecuenciasNumeracion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Suscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstadoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaCancelacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaFinGracia")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("TEXT");

                    b.Property<int>("MembresiaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("MembresiaId");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("Suscripciones");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TipoMovimientoInventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AfectaStock")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiereJustificacion")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TiposMovimientoInventario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            AfectaStock = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(5187),
                            Descripcion = "Entrada de mercancía al inventario",
                            Nombre = "Entrada",
                            RequiereJustificacion = false
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            AfectaStock = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(5192),
                            Descripcion = "Salida por venta de productos",
                            Nombre = "Venta",
                            RequiereJustificacion = false
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            AfectaStock = true,
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(5196),
                            Descripcion = "Ajuste de inventario por diferencias",
                            Nombre = "Ajuste",
                            RequiereJustificacion = true
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TransaccionVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CajaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int>("EstadoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaTransaccion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaUltimaSync")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashSync")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroFactura")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroTransaccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sincronizado")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("VendedorUsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CajaId");

                    b.HasIndex("EstadoId");

                    b.ToTable("TransaccionesVenta");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualizadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreadoPor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PrimerLogin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PrimerLoginEn")
                        .HasColumnType("TEXT");

                    b.Property<int>("RolId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UltimoLogin")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.HasIndex("NombreUsuario")
                        .IsUnique();

                    b.HasIndex("OrganizacionId");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Contrasena = "$2a$11$rBNh2aFXK3H8JQhY0z5NXOmL7sPQCHfXOQrpPz0YNhzQHquPHH0Hy",
                            Correo = "admin@gesco.com",
                            CreadoEn = new DateTime(2025, 8, 28, 9, 43, 7, 974, DateTimeKind.Local).AddTicks(4811),
                            NombreCompleto = "Administrador del Sistema",
                            NombreUsuario = "admin",
                            OrganizacionId = 1,
                            PrimerLogin = true,
                            RolId = 1,
                            Telefono = "8888-8888"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Actividad", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.EstadoActividad", "Estado")
                        .WithMany("Actividades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.Organizacion", "Organizacion")
                        .WithMany("Actividades")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActividadCategoria", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Actividad", "Actividad")
                        .WithMany("ActividadCategorias")
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.CategoriaServicio", "CategoriaServicio")
                        .WithMany("ActividadCategorias")
                        .HasForeignKey("CategoriaServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("CategoriaServicio");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Caja", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Actividad", "Actividad")
                        .WithMany("Cajas")
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actividad");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CategoriaServicio", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organizacion", "Organizacion")
                        .WithMany("CategoriasServicio")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CierreActividad", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Actividad", "Actividad")
                        .WithMany("CierresActividad")
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actividad");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CierreCaja", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Caja", "Caja")
                        .WithMany("CierresCaja")
                        .HasForeignKey("CajaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Caja");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ClaveActivacion", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Suscripcion", "Suscripcion")
                        .WithMany("ClavesActivacion")
                        .HasForeignKey("SuscripcionesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.Organizacion", "UtilizadaPorOrganizacion")
                        .WithMany()
                        .HasForeignKey("UtilizadaPorOrganizacionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Suscripcion");

                    b.Navigation("UtilizadaPorOrganizacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ColaSincronizacion", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organizacion", "Organizacion")
                        .WithMany("ColaSincronizacion")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ComboArticulo", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.ProductoCategoria", "Articulo")
                        .WithMany("ComboArticulos")
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.ComboVenta", "Combo")
                        .WithMany("ComboArticulos")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ComboVenta", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Actividad", "Actividad")
                        .WithMany("CombosVenta")
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actividad");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ConfiguracionSistema", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organizacion", "Organizacion")
                        .WithMany("ConfiguracionesSistema")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.DetalleTransaccionVenta", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.ProductoCategoria", "Articulo")
                        .WithMany("DetallesTransaccionVenta")
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.ComboVenta", "Combo")
                        .WithMany("DetallesTransaccionVenta")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.TransaccionVenta", "Transaccion")
                        .WithMany("DetallesTransaccionVenta")
                        .HasForeignKey("TransaccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Combo");

                    b.Navigation("Transaccion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.LogAuditoria", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organizacion", "Organizacion")
                        .WithMany("LogsAuditoria")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Modulo", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organizacion", "Organizacion")
                        .WithMany("Modulos")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.MovimientoInventario", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.ProductoCategoria", "Articulo")
                        .WithMany("MovimientosInventario")
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.TipoMovimientoInventario", "TipoMovimiento")
                        .WithMany("MovimientosInventario")
                        .HasForeignKey("TipoMovimientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.TransaccionVenta", "TransaccionVenta")
                        .WithMany("MovimientosInventario")
                        .HasForeignKey("TransaccionVentaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Articulo");

                    b.Navigation("TipoMovimiento");

                    b.Navigation("TransaccionVenta");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Notificacion", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organizacion", "Organizacion")
                        .WithMany("Notificaciones")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.PagoTransaccion", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.MetodoPago", "MetodoPago")
                        .WithMany("PagosTransacciones")
                        .HasForeignKey("MetodoPagoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.TransaccionVenta", "Transaccion")
                        .WithMany("PagosTransacciones")
                        .HasForeignKey("TransaccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetodoPago");

                    b.Navigation("Transaccion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ProductoCategoria", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.ActividadCategoria", "ActividadCategoria")
                        .WithMany("ProductosCategorias")
                        .HasForeignKey("ActividadCategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActividadCategoria");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SecuenciaNumeracion", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organizacion", "Organizacion")
                        .WithMany("SecuenciasNumeracion")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Suscripcion", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.EstadoSuscripcion", "Estado")
                        .WithMany("Suscripciones")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.Membresia", "Membresia")
                        .WithMany("Suscripciones")
                        .HasForeignKey("MembresiaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.Organizacion", "Organizacion")
                        .WithMany("Suscripciones")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Membresia");

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TransaccionVenta", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Caja", "Caja")
                        .WithMany("TransaccionesVenta")
                        .HasForeignKey("CajaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.EstadoVenta", "Estado")
                        .WithMany("TransaccionesVenta")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Caja");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Usuario", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organizacion", "Organizacion")
                        .WithMany("Usuarios")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizacion");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Actividad", b =>
                {
                    b.Navigation("ActividadCategorias");

                    b.Navigation("Cajas");

                    b.Navigation("CierresActividad");

                    b.Navigation("CombosVenta");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActividadCategoria", b =>
                {
                    b.Navigation("ProductosCategorias");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Caja", b =>
                {
                    b.Navigation("CierresCaja");

                    b.Navigation("TransaccionesVenta");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CategoriaServicio", b =>
                {
                    b.Navigation("ActividadCategorias");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ComboVenta", b =>
                {
                    b.Navigation("ComboArticulos");

                    b.Navigation("DetallesTransaccionVenta");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.EstadoActividad", b =>
                {
                    b.Navigation("Actividades");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.EstadoSuscripcion", b =>
                {
                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.EstadoVenta", b =>
                {
                    b.Navigation("TransaccionesVenta");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Membresia", b =>
                {
                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.MetodoPago", b =>
                {
                    b.Navigation("PagosTransacciones");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Organizacion", b =>
                {
                    b.Navigation("Actividades");

                    b.Navigation("CategoriasServicio");

                    b.Navigation("ColaSincronizacion");

                    b.Navigation("ConfiguracionesSistema");

                    b.Navigation("LogsAuditoria");

                    b.Navigation("Modulos");

                    b.Navigation("Notificaciones");

                    b.Navigation("SecuenciasNumeracion");

                    b.Navigation("Suscripciones");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ProductoCategoria", b =>
                {
                    b.Navigation("ComboArticulos");

                    b.Navigation("DetallesTransaccionVenta");

                    b.Navigation("MovimientosInventario");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Suscripcion", b =>
                {
                    b.Navigation("ClavesActivacion");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TipoMovimientoInventario", b =>
                {
                    b.Navigation("MovimientosInventario");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TransaccionVenta", b =>
                {
                    b.Navigation("DetallesTransaccionVenta");

                    b.Navigation("MovimientosInventario");

                    b.Navigation("PagosTransacciones");
                });
#pragma warning restore 612, 618
        }
    }
}
