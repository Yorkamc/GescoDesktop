// <auto-generated />
using System;
using Gesco.Desktop.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gesco.Desktop.Data.Migrations
{
    [DbContext(typeof(LocalDbContext))]
    [Migration("20251008164028_InitialCreateWithSeedData_20251008_104001")]
    partial class InitialCreateWithSeedData_20251008_104001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivationHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ActivatedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("activated_by_user_id");

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("activation_date");

                    b.Property<string>("ActivationIp")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("activation_ip");

                    b.Property<long>("ActivationKeyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activation_key_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("DeactivatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("deactivated_by");

                    b.Property<DateTime?>("DeactivationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("deactivation_date");

                    b.Property<string>("DeactivationReason")
                        .HasColumnType("TEXT")
                        .HasColumnName("deactivation_reason");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("SubscriptionEndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("subscription_end_date");

                    b.Property<DateTime>("SubscriptionStartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("subscription_start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedByUserId");

                    b.HasIndex("ActivationKeyId");

                    b.HasIndex("DeactivatedBy");

                    b.HasIndex("OrganizationId");

                    b.ToTable("activation_history");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivationKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ActivationCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("activation_code");

                    b.Property<string>("ActivationIp")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("activation_ip");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<int>("CurrentUses")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_uses");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration_date");

                    b.Property<string>("GeneratedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("generated_by");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("generated_date");

                    b.Property<string>("GenerationBatch")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("generation_batch");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_expired");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_generated");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_revoked");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_used");

                    b.Property<int>("MaxUses")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_uses");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("TEXT")
                        .HasColumnName("revocation_reason");

                    b.Property<string>("RevokedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("revoked_by");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("revoked_date");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UsedByOrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("used_by_organization_id");

                    b.Property<string>("UsedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("used_by_user_id");

                    b.Property<DateTime?>("UsedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("used_date");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedBy");

                    b.HasIndex("RevokedBy");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UsedByUserId");

                    b.ToTable("activation_keys");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("ActivityStatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activity_status_id");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_date");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_time");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("location");

                    b.Property<string>("ManagerUserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("manager_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_time");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("ManagerUserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SyncVersion", "LastSync")
                        .HasDatabaseName("idx_activities_sync_tracking");

                    b.ToTable("activities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityStatusId = 1L,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(7033),
                            CreatedBy = "118640123",
                            Description = "Sample activity for demonstration",
                            EndDate = new DateOnly(2025, 10, 9),
                            EndTime = new TimeOnly(18, 40, 26, 943).Add(TimeSpan.FromTicks(7011)),
                            Location = "Demo Location",
                            ManagerUserId = "118640123",
                            Name = "Demo Activity",
                            OrganizationId = new Guid("285eb9c0-12ed-4d18-8414-65337a00bd5b"),
                            StartDate = new DateOnly(2025, 10, 8),
                            StartTime = new TimeOnly(10, 40, 26, 943).Add(TimeSpan.FromTicks(6991)),
                            SyncStatus = "pending",
                            SyncVersion = 1L
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activity_id");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<long>("ServiceCategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("service_category_id");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("activity_categories");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityClosure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activity_id");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("closed_by");

                    b.Property<DateTime>("ClosureDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("closure_date");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<decimal>("DurationHours")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("duration_hours");

                    b.Property<decimal>("FinalInventoryValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("final_inventory_value");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<int>("ItemsWithStock")
                        .HasColumnType("INTEGER")
                        .HasColumnName("items_with_stock");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<string>("Observations")
                        .HasColumnType("TEXT")
                        .HasColumnName("observations");

                    b.Property<int>("OutOfStockItems")
                        .HasColumnType("INTEGER")
                        .HasColumnName("out_of_stock_items");

                    b.Property<int>("RegistersWithDifferences")
                        .HasColumnType("INTEGER")
                        .HasColumnName("registers_with_differences");

                    b.Property<decimal>("ShrinkageValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("shrinkage_value");

                    b.Property<string>("SupervisedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("supervised_by");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<int>("TotalItemsSold")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_items_sold");

                    b.Property<int>("TotalRegisters")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_registers");

                    b.Property<int>("TotalRemainingUnits")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_remaining_units");

                    b.Property<decimal>("TotalSales")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("total_sales");

                    b.Property<int>("TotalTransactions")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_transactions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ClosedBy");

                    b.HasIndex("SupervisedBy");

                    b.ToTable("activity_closures");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("activity_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6019),
                            Description = "Activity not started",
                            Name = "Not Started"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6024),
                            Description = "Activity in development",
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6028),
                            Description = "Activity completed",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6031),
                            Description = "Activity cancelled",
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ApiActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("endpoint");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("ip_address");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("method");

                    b.Property<string>("Module")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("module");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<string>("RequestData")
                        .HasColumnType("TEXT")
                        .HasColumnName("request_data");

                    b.Property<int>("ResponseStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("response_status");

                    b.Property<decimal?>("ResponseTimeMs")
                        .HasColumnType("TEXT")
                        .HasColumnName("response_time_ms");

                    b.Property<string>("UserAgent")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("OrganizationId", "CreatedAt")
                        .HasDatabaseName("idx_api_logs_org_date");

                    b.ToTable("api_activity_logs");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CashRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activity_id");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("closed_at");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_open");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("OpenedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("opened_at");

                    b.Property<string>("OperatorUserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("operator_user_id");

                    b.Property<int>("RegisterNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("register_number");

                    b.Property<string>("SupervisorUserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("supervisor_user_id");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("OperatorUserId");

                    b.HasIndex("SupervisorUserId");

                    b.ToTable("cash_registers");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CashRegisterClosure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<decimal>("CardsCalculated")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("cards_calculated");

                    b.Property<decimal>("CashCalculated")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("cash_calculated");

                    b.Property<decimal?>("CashDeclared")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("cash_declared");

                    b.Property<decimal?>("CashDifference")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("cash_difference");

                    b.Property<long>("CashRegisterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cash_register_id");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("closed_by");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("closing_date");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<string>("Observations")
                        .HasColumnType("TEXT")
                        .HasColumnName("observations");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("opening_date");

                    b.Property<decimal>("SinpeCalculated")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("sinpe_calculated");

                    b.Property<string>("SupervisedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("supervised_by");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<int>("TotalItemsSold")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_items_sold");

                    b.Property<decimal>("TotalSalesAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("total_sales_amount");

                    b.Property<int>("TotalTransactions")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_transactions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("ClosedBy");

                    b.HasIndex("SupervisedBy");

                    b.ToTable("cash_register_closures");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CategoryProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<long>("ActivityCategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activity_category_id");

                    b.Property<int>("AlertQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("alert_quantity");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_quantity");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int>("InitialQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("initial_quantity");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityCategoryId");

                    b.ToTable("category_products");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ComboItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("ComboId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("combo_id");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<long>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductId");

                    b.ToTable("combo_items");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.DesktopClient", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AppVersion")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("app_version");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("ip_address");

                    b.Property<DateTime?>("LastConnection")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_connection");

                    b.Property<long>("LastSyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("last_sync_version");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("INTEGER")
                        .HasColumnName("read_only");

                    b.Property<bool>("ReceiveNotifications")
                        .HasColumnType("INTEGER")
                        .HasColumnName("receive_notifications");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("registered_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<int>("SyncIntervalSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_interval_seconds");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("desktop_clients");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.InventoryMovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AuthorizedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("authorized_by");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<string>("Justification")
                        .HasColumnType("TEXT")
                        .HasColumnName("justification");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("movement_date");

                    b.Property<long>("MovementTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("movement_type_id");

                    b.Property<int>("NewQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("new_quantity");

                    b.Property<string>("PerformedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("performed_by");

                    b.Property<int>("PreviousQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("previous_quantity");

                    b.Property<long>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<long?>("SalesTransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sales_transaction_id");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<decimal?>("TotalValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("total_value");

                    b.Property<decimal?>("UnitCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("unit_cost");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizedBy");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("PerformedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesTransactionId");

                    b.ToTable("inventory_movements");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.InventoryMovementType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("RequiresJustification")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requires_justification");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("inventory_movement_types");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6263),
                            Description = "Merchandise entry to inventory",
                            Name = "Stock In",
                            RequiresJustification = false
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6269),
                            Description = "Stock out by product sale",
                            Name = "Sale",
                            RequiresJustification = false
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6273),
                            Description = "Inventory adjustment for differences",
                            Name = "Adjustment",
                            RequiresJustification = true
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Membership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<decimal>("AnnualPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("annual_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<decimal>("MonthlyPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("monthly_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserLimit")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_limit");

                    b.HasKey("Id");

                    b.ToTable("memberships");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            AnnualPrice = 299.99m,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6663),
                            Description = "Basic membership with essential features",
                            MonthlyPrice = 29.99m,
                            Name = "Basic",
                            UserLimit = 5
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            AnnualPrice = 599.99m,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6671),
                            Description = "Professional membership with advanced features",
                            MonthlyPrice = 59.99m,
                            Name = "Professional",
                            UserLimit = 25
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            AnnualPrice = 1299.99m,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6676),
                            Description = "Enterprise membership with unlimited features",
                            MonthlyPrice = 129.99m,
                            Name = "Enterprise",
                            UserLimit = 100
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("TEXT")
                        .HasColumnName("additional_data");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("DeliveryChannels")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("delivery_channels");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("Important")
                        .HasColumnType("INTEGER")
                        .HasColumnName("important");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("message");

                    b.Property<long>("NotificationTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("notification_type_id");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("read_at");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("scheduled_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("OrganizationId", "IsRead", "Important")
                        .HasDatabaseName("idx_notifications_org_status");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.NotificationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("notification_types");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Code = "low_stock",
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6867),
                            Description = "Product inventory is running low",
                            Level = "warning",
                            Name = "Low Stock Alert"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Code = "activity_reminder",
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6873),
                            Description = "Upcoming activity notification",
                            Level = "info",
                            Name = "Activity Reminder"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            Code = "system_alert",
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6878),
                            Description = "Critical system notification",
                            Level = "critical",
                            Name = "System Alert"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            Code = "sync_error",
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6883),
                            Description = "Data synchronization failed",
                            Level = "error",
                            Name = "Sync Error"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.OAuthAccessToken", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("Revoked")
                        .HasColumnType("INTEGER")
                        .HasColumnName("revoked");

                    b.Property<string>("Scopes")
                        .HasColumnType("TEXT")
                        .HasColumnName("scopes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("oauth_access_tokens");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.OAuthRefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AccessTokenId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT")
                        .HasColumnName("access_token_id");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at");

                    b.Property<bool>("Revoked")
                        .HasColumnType("INTEGER")
                        .HasColumnName("revoked");

                    b.HasKey("Id");

                    b.HasIndex("AccessTokenId");

                    b.ToTable("oauth_refresh_tokens");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("PurchaserName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("purchaser_name");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("SyncVersion", "LastSync")
                        .HasDatabaseName("idx_organizations_sync_tracking");

                    b.ToTable("organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("285eb9c0-12ed-4d18-8414-65337a00bd5b"),
                            Active = true,
                            Address = "San José, Costa Rica",
                            ContactEmail = "demo@gesco.com",
                            ContactPhone = "2222-2222",
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(5389),
                            Name = "Demo Organization",
                            PurchaserName = "Demo Administrator",
                            SyncStatus = "pending",
                            SyncVersion = 1L
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("RequiresReference")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requires_reference");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("payment_methods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6180),
                            Name = "Cash",
                            RequiresReference = false
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6185),
                            Name = "Card",
                            RequiresReference = true
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6189),
                            Name = "SINPE Mobile",
                            RequiresReference = true
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(5832),
                            Description = "Full system access",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(5838),
                            Description = "Sales and cash register access",
                            Name = "Salesperson"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(5843),
                            Description = "Activity supervision",
                            Name = "Supervisor"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesCombo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activity_id");

                    b.Property<decimal>("ComboPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("combo_price");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("sales_combos");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("sales_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6093),
                            Description = "Sale pending processing",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6097),
                            Description = "Sale completed successfully",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6101),
                            Description = "Sale cancelled",
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("CashRegisterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cash_register_id");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("invoice_number");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<long>("SalesStatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sales_status_id");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("transaction_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("SalesStatusId");

                    b.ToTable("sales_transactions");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ServiceCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("service_categories");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("cancellation_date");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration_date");

                    b.Property<DateTime>("GracePeriodEnd")
                        .HasColumnType("TEXT")
                        .HasColumnName("grace_period_end");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<long>("MembershipId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("membership_id");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.Property<long>("SubscriptionStatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("subscription_status_id");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SubscriptionStatusId");

                    b.ToTable("subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6784),
                            ExpirationDate = new DateTime(2026, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6763),
                            GracePeriodEnd = new DateTime(2026, 11, 7, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6776),
                            MembershipId = 1L,
                            OrganizationId = new Guid("285eb9c0-12ed-4d18-8414-65337a00bd5b"),
                            StartDate = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6761),
                            SubscriptionStatusId = 1L,
                            SyncStatus = "pending",
                            SyncVersion = 1L
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SubscriptionStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<bool>("AllowsSystemUsage")
                        .HasColumnType("INTEGER")
                        .HasColumnName("allows_system_usage");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("subscription_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            AllowsSystemUsage = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6353),
                            Description = "Active subscription",
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            AllowsSystemUsage = false,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6359),
                            Description = "Suspended subscription",
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            AllowsSystemUsage = false,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6364),
                            Description = "Cancelled subscription",
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SyncQueueItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AffectedTable")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("affected_table");

                    b.Property<int>("Attempts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("attempts");

                    b.Property<string>("BatchId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("batch_id");

                    b.Property<string>("ChangeData")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("change_data");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("error_code");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT")
                        .HasColumnName("error_message");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_attempts");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("operation");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER")
                        .HasColumnName("priority");

                    b.Property<long>("RecordId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("record_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ClientId", "AffectedTable", "RecordId", "SyncVersion")
                        .HasDatabaseName("idx_sync_queue_unique");

                    b.ToTable("sync_queue");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SyncVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ChangeData")
                        .HasColumnType("TEXT")
                        .HasColumnName("change_data");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("change_date");

                    b.Property<string>("ChangedByUser")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("changed_by_user");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("operation");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<string>("OriginClientId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("origin_client_id");

                    b.Property<long>("RecordId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("record_id");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("table_name");

                    b.Property<long>("Version")
                        .HasColumnType("INTEGER")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ChangedByUser");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OriginClientId");

                    b.ToTable("sync_versions");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SystemConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("access_level");

                    b.Property<string>("AllowedValues")
                        .HasColumnType("TEXT")
                        .HasColumnName("allowed_values");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("data_type");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("display_order");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("environment");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_editable");

                    b.Property<bool>("IsSensitive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_sensitive");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("max_value");

                    b.Property<decimal?>("MinValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("min_value");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<bool>("RestartRequired")
                        .HasColumnType("INTEGER")
                        .HasColumnName("restart_required");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<string>("ValidationPattern")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("validation_pattern");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("system_configuration");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessLevel = "admin",
                            Category = "system",
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6432),
                            DataType = "string",
                            Description = "System version",
                            DisplayOrder = 0,
                            Environment = "all",
                            IsEditable = false,
                            IsSensitive = false,
                            Key = "system.version",
                            RestartRequired = false,
                            Value = "1.0.0"
                        },
                        new
                        {
                            Id = 2L,
                            AccessLevel = "admin",
                            Category = "backup",
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6437),
                            DataType = "int",
                            Description = "Backup interval in hours",
                            DisplayOrder = 0,
                            Environment = "all",
                            IsEditable = true,
                            IsSensitive = false,
                            Key = "backup.interval_hours",
                            RestartRequired = false,
                            Value = "6"
                        },
                        new
                        {
                            Id = 3L,
                            AccessLevel = "admin",
                            Category = "license",
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(6442),
                            DataType = "int",
                            Description = "License check interval in days",
                            DisplayOrder = 0,
                            Environment = "all",
                            IsEditable = true,
                            IsSensitive = false,
                            Key = "license.check_interval_days",
                            RestartRequired = false,
                            Value = "7"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TransactionDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long?>("ComboId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("combo_id");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<bool>("IsCombo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_combo");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<long>("SalesTransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sales_transaction_id");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("total_amount");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesTransactionId");

                    b.ToTable("transaction_details");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TransactionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("amount");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<long>("PaymentMethodId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("payment_method_id");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_at");

                    b.Property<string>("ProcessedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_by");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("reference");

                    b.Property<long>("SalesTransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sales_transaction_id");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ProcessedBy");

                    b.HasIndex("SalesTransactionId");

                    b.ToTable("transaction_payments");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("cedula");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("ConflictResolution")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("conflict_resolution");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("email_verified_at");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("INTEGER")
                        .HasColumnName("first_login");

                    b.Property<DateTime?>("FirstLoginAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("first_login_at");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_login_at");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync_error");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<long>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("role_id");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_users_email_unique");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("idx_users_cedula_unique");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("idx_users_username_unique");

                    b.HasIndex("SyncVersion", "LastSync")
                        .HasDatabaseName("idx_users_sync_tracking");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = "118640123",
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 8, 16, 40, 26, 943, DateTimeKind.Utc).AddTicks(5950),
                            Email = "admin@gesco.com",
                            FirstLogin = true,
                            FullName = "System Administrator",
                            OrganizationId = new Guid("285eb9c0-12ed-4d18-8414-65337a00bd5b"),
                            Password = "$2a$12$LQV.K4/OOOgwdEXCfC7jC.QLwpZ9HkqhXfOr9p6mTyYFEYGHZcP/a",
                            Phone = "8888-8888",
                            RoleId = 1L,
                            SyncStatus = "pending",
                            SyncVersion = 1L,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivationHistory", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.User", "ActivatedByUser")
                        .WithMany()
                        .HasForeignKey("ActivatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gesco.Desktop.Data.Entities.ActivationKey", "ActivationKey")
                        .WithMany()
                        .HasForeignKey("ActivationKeyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "DeactivatedByUser")
                        .WithMany()
                        .HasForeignKey("DeactivatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivatedByUser");

                    b.Navigation("ActivationKey");

                    b.Navigation("DeactivatedByUser");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivationKey", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.User", "GeneratedByUser")
                        .WithMany()
                        .HasForeignKey("GeneratedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "RevokedByUser")
                        .WithMany()
                        .HasForeignKey("RevokedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.Subscription", "Subscription")
                        .WithMany("ActivationKeys")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "UsedByUser")
                        .WithMany()
                        .HasForeignKey("UsedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GeneratedByUser");

                    b.Navigation("RevokedByUser");

                    b.Navigation("Subscription");

                    b.Navigation("UsedByUser");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Activity", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.ActivityStatus", "ActivityStatus")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "ManagerUser")
                        .WithMany()
                        .HasForeignKey("ManagerUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany("Activities")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ActivityStatus");

                    b.Navigation("ManagerUser");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityCategory", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Activity", "Activity")
                        .WithMany("ActivityCategories")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("ActivityCategories")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityClosure", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "ClosedByUser")
                        .WithMany()
                        .HasForeignKey("ClosedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "SupervisedByUser")
                        .WithMany()
                        .HasForeignKey("SupervisedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Activity");

                    b.Navigation("ClosedByUser");

                    b.Navigation("SupervisedByUser");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ApiActivityLog", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CashRegister", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Activity", "Activity")
                        .WithMany("CashRegisters")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "OperatorUser")
                        .WithMany()
                        .HasForeignKey("OperatorUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "SupervisorUser")
                        .WithMany()
                        .HasForeignKey("SupervisorUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Activity");

                    b.Navigation("OperatorUser");

                    b.Navigation("SupervisorUser");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CashRegisterClosure", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.CashRegister", "CashRegister")
                        .WithMany("CashRegisterClosures")
                        .HasForeignKey("CashRegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "ClosedByUser")
                        .WithMany()
                        .HasForeignKey("ClosedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "SupervisedByUser")
                        .WithMany()
                        .HasForeignKey("SupervisedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CashRegister");

                    b.Navigation("ClosedByUser");

                    b.Navigation("SupervisedByUser");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CategoryProduct", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.ActivityCategory", "ActivityCategory")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("ActivityCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityCategory");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ComboItem", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.SalesCombo", "Combo")
                        .WithMany("ComboItems")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.CategoryProduct", "Product")
                        .WithMany("ComboItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.DesktopClient", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.InventoryMovement", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.User", "AuthorizedByUser")
                        .WithMany()
                        .HasForeignKey("AuthorizedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.InventoryMovementType", "MovementType")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.CategoryProduct", "Product")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.SalesTransaction", "SalesTransaction")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("SalesTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AuthorizedByUser");

                    b.Navigation("MovementType");

                    b.Navigation("PerformedByUser");

                    b.Navigation("Product");

                    b.Navigation("SalesTransaction");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Notification", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("NotificationType");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.OAuthAccessToken", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.OAuthRefreshToken", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.OAuthAccessToken", "AccessToken")
                        .WithMany()
                        .HasForeignKey("AccessTokenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessToken");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesCombo", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Activity", "Activity")
                        .WithMany("SalesCombos")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesTransaction", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.CashRegister", "CashRegister")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("CashRegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.SalesStatus", "SalesStatus")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("SalesStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CashRegister");

                    b.Navigation("SalesStatus");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ServiceCategory", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany("ServiceCategories")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Subscription", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Membership", "Membership")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany("Subscriptions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.SubscriptionStatus", "SubscriptionStatus")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("Organization");

                    b.Navigation("SubscriptionStatus");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SyncQueueItem", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.DesktopClient", "DesktopClient")
                        .WithMany("SyncQueueItems")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DesktopClient");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SyncVersion", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.User", "ChangedByUserNavigation")
                        .WithMany()
                        .HasForeignKey("ChangedByUser")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.DesktopClient", "OriginClient")
                        .WithMany()
                        .HasForeignKey("OriginClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChangedByUserNavigation");

                    b.Navigation("Organization");

                    b.Navigation("OriginClient");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SystemConfiguration", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TransactionDetail", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.SalesCombo", "Combo")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gesco.Desktop.Data.Entities.CategoryProduct", "Product")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gesco.Desktop.Data.Entities.SalesTransaction", "SalesTransaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("SalesTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Product");

                    b.Navigation("SalesTransaction");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TransactionPayment", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("TransactionPayments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.User", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.SalesTransaction", "SalesTransaction")
                        .WithMany("TransactionPayments")
                        .HasForeignKey("SalesTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("ProcessedByUser");

                    b.Navigation("SalesTransaction");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.User", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Activity", b =>
                {
                    b.Navigation("ActivityCategories");

                    b.Navigation("CashRegisters");

                    b.Navigation("SalesCombos");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityCategory", b =>
                {
                    b.Navigation("CategoryProducts");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityStatus", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CashRegister", b =>
                {
                    b.Navigation("CashRegisterClosures");

                    b.Navigation("SalesTransactions");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CategoryProduct", b =>
                {
                    b.Navigation("ComboItems");

                    b.Navigation("InventoryMovements");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.DesktopClient", b =>
                {
                    b.Navigation("SyncQueueItems");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.InventoryMovementType", b =>
                {
                    b.Navigation("InventoryMovements");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Membership", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Organization", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ServiceCategories");

                    b.Navigation("Subscriptions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.PaymentMethod", b =>
                {
                    b.Navigation("TransactionPayments");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesCombo", b =>
                {
                    b.Navigation("ComboItems");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesStatus", b =>
                {
                    b.Navigation("SalesTransactions");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesTransaction", b =>
                {
                    b.Navigation("InventoryMovements");

                    b.Navigation("TransactionDetails");

                    b.Navigation("TransactionPayments");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ServiceCategory", b =>
                {
                    b.Navigation("ActivityCategories");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Subscription", b =>
                {
                    b.Navigation("ActivationKeys");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SubscriptionStatus", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
