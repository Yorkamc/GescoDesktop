// <auto-generated />
using System;
using Gesco.Desktop.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gesco.Desktop.Data.Migrations
{
    [DbContext(typeof(LocalDbContext))]
    partial class LocalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivationKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ActivationCode")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT")
                        .HasColumnName("activation_code");

                    b.Property<string>("ActivationIp")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("activation_ip");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<int>("CurrentUses")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_uses");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration_date");

                    b.Property<Guid?>("GeneratedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("generated_by");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("generated_date");

                    b.Property<string>("GenerationBatch")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("generation_batch");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_expired");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_generated");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_revoked");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_used");

                    b.Property<int>("MaxUses")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_uses");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("TEXT")
                        .HasColumnName("revocation_reason");

                    b.Property<Guid?>("RevokedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("revoked_by");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("revoked_date");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UsedByOrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("used_by_organization_id");

                    b.Property<Guid?>("UsedByUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("used_by_user_id");

                    b.Property<DateTime?>("UsedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("used_date");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("activation_keys");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ActivityStatusId")
                        .HasColumnType("TEXT")
                        .HasColumnName("activity_status_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_date");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_time");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("location");

                    b.Property<Guid?>("ManagerUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("manager_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_time");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("activities");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT")
                        .HasColumnName("activity_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("TEXT")
                        .HasColumnName("service_category_id");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("activity_categories");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityClosure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT")
                        .HasColumnName("activity_id");

                    b.Property<Guid?>("ClosedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("closed_by");

                    b.Property<DateTime>("ClosureDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("closure_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<decimal>("DurationHours")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("duration_hours");

                    b.Property<decimal>("FinalInventoryValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("final_inventory_value");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<int>("ItemsWithStock")
                        .HasColumnType("INTEGER")
                        .HasColumnName("items_with_stock");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("Observations")
                        .HasColumnType("TEXT")
                        .HasColumnName("observations");

                    b.Property<int>("OutOfStockItems")
                        .HasColumnType("INTEGER")
                        .HasColumnName("out_of_stock_items");

                    b.Property<int>("RegistersWithDifferences")
                        .HasColumnType("INTEGER")
                        .HasColumnName("registers_with_differences");

                    b.Property<decimal>("ShrinkageValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("shrinkage_value");

                    b.Property<Guid?>("SupervisedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("supervised_by");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<int>("TotalItemsSold")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_items_sold");

                    b.Property<int>("TotalRegisters")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_registers");

                    b.Property<int>("TotalRemainingUnits")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_remaining_units");

                    b.Property<decimal>("TotalSales")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("total_sales");

                    b.Property<int>("TotalTransactions")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_transactions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("activity_closures");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("activity_statuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("576ecfc4-e6f8-41a9-bb2b-e1b3fb2b55b3"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5459),
                            Description = "Activity not started",
                            Name = "Not Started"
                        },
                        new
                        {
                            Id = new Guid("a6faf492-6c4a-48e2-89a2-c872852e42bc"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5466),
                            Description = "Activity in development",
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = new Guid("b883d441-e010-4799-943a-1bade7c09953"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5477),
                            Description = "Activity completed",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = new Guid("c44d0120-ad31-41dd-9f4d-2080c880f40e"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5599),
                            Description = "Activity cancelled",
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CashRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT")
                        .HasColumnName("activity_id");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_open");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("OpenedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("opened_at");

                    b.Property<Guid?>("OperatorUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("operator_user_id");

                    b.Property<int>("RegisterNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("register_number");

                    b.Property<Guid?>("SupervisorUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("supervisor_user_id");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("cash_registers");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CashRegisterClosure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<decimal>("CardsCalculated")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("cards_calculated");

                    b.Property<decimal>("CashCalculated")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("cash_calculated");

                    b.Property<decimal?>("CashDeclared")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("cash_declared");

                    b.Property<decimal?>("CashDifference")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("cash_difference");

                    b.Property<Guid>("CashRegisterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cash_register_id");

                    b.Property<Guid?>("ClosedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("closed_by");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("closing_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("Observations")
                        .HasColumnType("TEXT")
                        .HasColumnName("observations");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("opening_date");

                    b.Property<decimal>("SinpeCalculated")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("sinpe_calculated");

                    b.Property<Guid?>("SupervisedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("supervised_by");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<int>("TotalItemsSold")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_items_sold");

                    b.Property<decimal>("TotalSalesAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("total_sales_amount");

                    b.Property<int>("TotalTransactions")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_transactions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CashRegisterId");

                    b.ToTable("cash_register_closures");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CategoryProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<Guid>("ActivityCategoryId")
                        .HasColumnType("TEXT")
                        .HasColumnName("activity_category_id");

                    b.Property<int>("AlertQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("alert_quantity");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_quantity");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int>("InitialQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("initial_quantity");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityCategoryId");

                    b.ToTable("category_products");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ComboItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("TEXT")
                        .HasColumnName("combo_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductId");

                    b.ToTable("combo_items");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.InventoryMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("authorized_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<string>("Justification")
                        .HasColumnType("TEXT")
                        .HasColumnName("justification");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("movement_date");

                    b.Property<Guid>("MovementTypeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("movement_type_id");

                    b.Property<int>("NewQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("new_quantity");

                    b.Property<Guid?>("PerformedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("performed_by");

                    b.Property<int>("PreviousQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("previous_quantity");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("SalesTransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("sales_transaction_id");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<decimal?>("TotalValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("total_value");

                    b.Property<decimal?>("UnitCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("unit_cost");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesTransactionId");

                    b.ToTable("inventory_movements");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.InventoryMovementType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("RequiresJustification")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requires_justification");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("inventory_movement_types");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9858b30b-5dc5-4926-8f92-eeb9adbcbdfc"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5908),
                            Description = "Merchandise entry to inventory",
                            Name = "Stock In",
                            RequiresJustification = false
                        },
                        new
                        {
                            Id = new Guid("c4684aae-de50-436e-9467-7c1cf3bc18a6"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5917),
                            Description = "Stock out by product sale",
                            Name = "Sale",
                            RequiresJustification = false
                        },
                        new
                        {
                            Id = new Guid("7683b342-cee4-419d-a08a-2771e10f7871"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5926),
                            Description = "Inventory adjustment for differences",
                            Name = "Adjustment",
                            RequiresJustification = true
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<decimal>("AnnualPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("annual_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<decimal>("MonthlyPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("monthly_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserLimit")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_limit");

                    b.HasKey("Id");

                    b.ToTable("memberships");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("PurchaserName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("purchaser_name");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b7bd928-2f60-4519-b7ef-7893564eba85"),
                            Active = true,
                            Address = "San José, Costa Rica",
                            ContactEmail = "demo@gesco.com",
                            ContactPhone = "2222-2222",
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(4660),
                            Name = "Demo Organization",
                            PurchaserName = "Demo Administrator",
                            SyncVersion = 1L
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("RequiresReference")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requires_reference");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("payment_methods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ea387c0-d207-4f4f-b5fb-a462f5522c71"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5779),
                            Name = "Cash",
                            RequiresReference = false
                        },
                        new
                        {
                            Id = new Guid("e961ab76-354a-454e-b748-3270c1f3a7eb"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5787),
                            Name = "Card",
                            RequiresReference = true
                        },
                        new
                        {
                            Id = new Guid("8fbc6b3e-d8d0-4787-b651-2b5f776adea0"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5825),
                            Name = "SINPE Mobile",
                            RequiresReference = true
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("619e32c5-5639-47a5-aae7-65e85476bb24"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5225),
                            Description = "Full system access",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("1cd04798-9c33-4292-a050-e246fd2bec1f"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5233),
                            Description = "Sales and cash register access",
                            Name = "Salesperson"
                        },
                        new
                        {
                            Id = new Guid("70b1ee11-0462-48f7-acc9-474821107660"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5240),
                            Description = "Activity supervision",
                            Name = "Supervisor"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesCombo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT")
                        .HasColumnName("activity_id");

                    b.Property<decimal>("ComboPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("combo_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("sales_combos");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("sales_statuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f41560b0-91ab-45ff-b866-dd1454ac68a5"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5697),
                            Description = "Sale pending processing",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("1c33bac6-c332-47e2-9fa8-89f054ae176a"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5704),
                            Description = "Sale completed successfully",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = new Guid("5f9b15bf-6e0e-4d1a-9e17-f0577abd86eb"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5710),
                            Description = "Sale cancelled",
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("CashRegisterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cash_register_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("invoice_number");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<Guid>("SalesStatusId")
                        .HasColumnType("TEXT")
                        .HasColumnName("sales_status_id");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("transaction_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("SalesStatusId");

                    b.ToTable("sales_transactions");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("service_categories");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("cancellation_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration_date");

                    b.Property<DateTime>("GracePeriodEnd")
                        .HasColumnType("TEXT")
                        .HasColumnName("grace_period_end");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("TEXT")
                        .HasColumnName("membership_id");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.Property<Guid>("SubscriptionStatusId")
                        .HasColumnType("TEXT")
                        .HasColumnName("subscription_status_id");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SubscriptionStatusId");

                    b.ToTable("subscriptions");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SubscriptionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<bool>("AllowsSystemUsage")
                        .HasColumnType("INTEGER")
                        .HasColumnName("allows_system_usage");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("subscription_statuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c699c536-3ea8-4bff-9326-c3336c56b003"),
                            Active = true,
                            AllowsSystemUsage = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(6010),
                            Description = "Active subscription",
                            Name = "Active"
                        },
                        new
                        {
                            Id = new Guid("0a51d32a-6d89-45dc-8f2d-c054bd84c64e"),
                            Active = true,
                            AllowsSystemUsage = false,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(6020),
                            Description = "Suspended subscription",
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = new Guid("f77d27a8-eff9-4294-8621-f269aec9585e"),
                            Active = true,
                            AllowsSystemUsage = false,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(6028),
                            Description = "Cancelled subscription",
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SystemConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("access_level");

                    b.Property<string>("AllowedValues")
                        .HasColumnType("TEXT")
                        .HasColumnName("allowed_values");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("data_type");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("display_order");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("environment");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_editable");

                    b.Property<bool>("IsSensitive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_sensitive");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("max_value");

                    b.Property<decimal?>("MinValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("min_value");

                    b.Property<bool>("RestartRequired")
                        .HasColumnType("INTEGER")
                        .HasColumnName("restart_required");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<string>("ValidationPattern")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("validation_pattern");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("system_configurations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("034d18b6-74c7-4b59-af07-055cf860b110"),
                            AccessLevel = "admin",
                            Category = "system",
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(6100),
                            DataType = "string",
                            Description = "System version",
                            DisplayOrder = 0,
                            Environment = "all",
                            IsEditable = false,
                            IsSensitive = false,
                            Key = "system.version",
                            RestartRequired = false,
                            Value = "1.0.0"
                        },
                        new
                        {
                            Id = new Guid("b3a5e165-9bb4-4a0c-83b3-ca9e07d46ed9"),
                            AccessLevel = "admin",
                            Category = "backup",
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(6116),
                            DataType = "int",
                            Description = "Backup interval in hours",
                            DisplayOrder = 0,
                            Environment = "all",
                            IsEditable = true,
                            IsSensitive = false,
                            Key = "backup.interval_hours",
                            RestartRequired = false,
                            Value = "6"
                        },
                        new
                        {
                            Id = new Guid("9b726a26-5f30-485b-abbb-d787c3d7ac52"),
                            AccessLevel = "admin",
                            Category = "license",
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(6124),
                            DataType = "int",
                            Description = "License check interval in days",
                            DisplayOrder = 0,
                            Environment = "all",
                            IsEditable = true,
                            IsSensitive = false,
                            Key = "license.check_interval_days",
                            RestartRequired = false,
                            Value = "7"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TransactionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("TEXT")
                        .HasColumnName("combo_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<bool>("IsCombo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_combo");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<Guid>("SalesTransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("sales_transaction_id");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("total_amount");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesTransactionId");

                    b.ToTable("transaction_details");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TransactionPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_method_id");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_at");

                    b.Property<Guid>("ProcessedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_by");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("reference");

                    b.Property<Guid>("SalesTransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("sales_transaction_id");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SalesTransactionId");

                    b.ToTable("transaction_payments");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("email_verified_at");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("INTEGER")
                        .HasColumnName("first_login");

                    b.Property<DateTime?>("FirstLoginAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("first_login_at");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("integrity_hash");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_login_at");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_sync");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.Property<long>("SyncVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sync_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4e07ae2-fe3a-4390-a3ea-8fb94211721c"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 9, 8, 0, 12, 30, 514, DateTimeKind.Utc).AddTicks(5347),
                            Email = "admin@gesco.com",
                            FirstLogin = true,
                            FullName = "System Administrator",
                            OrganizationId = new Guid("1b7bd928-2f60-4519-b7ef-7893564eba85"),
                            Password = "$2a$12$6nybiEVKavFp/iZhsQrSLuNIhhAnRx2STs6Fmzj.BCF4gUAwMtCV6",
                            Phone = "8888-8888",
                            RoleId = new Guid("619e32c5-5639-47a5-aae7-65e85476bb24"),
                            SyncVersion = 1L,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivationKey", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Subscription", "Subscription")
                        .WithMany("ActivationKeys")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Activity", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.ActivityStatus", "ActivityStatus")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany("Activities")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ActivityStatus");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityCategory", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Activity", "Activity")
                        .WithMany("ActivityCategories")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("ActivityCategories")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityClosure", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CashRegister", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Activity", "Activity")
                        .WithMany("CashRegisters")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CashRegisterClosure", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.CashRegister", "CashRegister")
                        .WithMany("CashRegisterClosures")
                        .HasForeignKey("CashRegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CashRegister");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CategoryProduct", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.ActivityCategory", "ActivityCategory")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("ActivityCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityCategory");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ComboItem", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.SalesCombo", "Combo")
                        .WithMany("ComboItems")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.CategoryProduct", "Product")
                        .WithMany("ComboItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.InventoryMovement", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.InventoryMovementType", "MovementType")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.CategoryProduct", "Product")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.SalesTransaction", "SalesTransaction")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("SalesTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MovementType");

                    b.Navigation("Product");

                    b.Navigation("SalesTransaction");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesCombo", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Activity", "Activity")
                        .WithMany("SalesCombos")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesTransaction", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.CashRegister", "CashRegister")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("CashRegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.SalesStatus", "SalesStatus")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("SalesStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CashRegister");

                    b.Navigation("SalesStatus");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ServiceCategory", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany("ServiceCategories")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Subscription", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Membership", "Membership")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany("Subscriptions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.SubscriptionStatus", "SubscriptionStatus")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("Organization");

                    b.Navigation("SubscriptionStatus");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TransactionDetail", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.SalesCombo", "Combo")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gesco.Desktop.Data.Entities.CategoryProduct", "Product")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gesco.Desktop.Data.Entities.SalesTransaction", "SalesTransaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("SalesTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Product");

                    b.Navigation("SalesTransaction");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.TransactionPayment", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("TransactionPayments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.SalesTransaction", "SalesTransaction")
                        .WithMany("TransactionPayments")
                        .HasForeignKey("SalesTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("SalesTransaction");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.User", b =>
                {
                    b.HasOne("Gesco.Desktop.Data.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gesco.Desktop.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Activity", b =>
                {
                    b.Navigation("ActivityCategories");

                    b.Navigation("CashRegisters");

                    b.Navigation("SalesCombos");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityCategory", b =>
                {
                    b.Navigation("CategoryProducts");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ActivityStatus", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CashRegister", b =>
                {
                    b.Navigation("CashRegisterClosures");

                    b.Navigation("SalesTransactions");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.CategoryProduct", b =>
                {
                    b.Navigation("ComboItems");

                    b.Navigation("InventoryMovements");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.InventoryMovementType", b =>
                {
                    b.Navigation("InventoryMovements");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Membership", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Organization", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ServiceCategories");

                    b.Navigation("Subscriptions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.PaymentMethod", b =>
                {
                    b.Navigation("TransactionPayments");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesCombo", b =>
                {
                    b.Navigation("ComboItems");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesStatus", b =>
                {
                    b.Navigation("SalesTransactions");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SalesTransaction", b =>
                {
                    b.Navigation("InventoryMovements");

                    b.Navigation("TransactionDetails");

                    b.Navigation("TransactionPayments");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.ServiceCategory", b =>
                {
                    b.Navigation("ActivityCategories");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.Subscription", b =>
                {
                    b.Navigation("ActivationKeys");
                });

            modelBuilder.Entity("Gesco.Desktop.Data.Entities.SubscriptionStatus", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
