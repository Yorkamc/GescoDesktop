# optimize-database.ps1 - Ejecutar optimizaci√≥n SQLite manualmente
param(
    [switch]$Verbose = $false,
    [switch]$TestMode = $false
)

Write-Host "=============================================" -ForegroundColor Cyan
Write-Host "  OPTIMIZACI√ìN DE BASE DE DATOS GESCO" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan

# Configuraci√≥n
$backendPath = "backend"
$dbPath = "$backendPath/src/Gesco.Desktop.UI/data/gesco_local.db"
$scriptPath = "$backendPath/src/Gesco.Desktop.Data/script/sqlite_optimization_script.sql"
$backupPath = "$backendPath/src/Gesco.Desktop.UI/data/gesco_local_backup_$(Get-Date -Format 'yyyyMMdd_HHmmss').db"

# Verificar prerequisitos
Write-Host ""
Write-Host "Verificando prerequisitos..." -ForegroundColor Yellow

if (-not (Test-Path $dbPath)) {
    Write-Host "‚ùå Base de datos no encontrada: $dbPath" -ForegroundColor Red
    Write-Host "   Ejecuta primero: .\reset-database.ps1" -ForegroundColor Gray
    exit 1
}

if (-not (Test-Path $scriptPath)) {
    Write-Host "‚ùå Script de optimizaci√≥n no encontrado: $scriptPath" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Base de datos encontrada: $dbPath" -ForegroundColor Green
Write-Host "‚úÖ Script de optimizaci√≥n encontrado: $scriptPath" -ForegroundColor Green

# Informaci√≥n previa
$dbSizeBefore = (Get-Item $dbPath).Length
$dbSizeBeforeKB = [math]::Round($dbSizeBefore / 1024, 2)
Write-Host "üìä Tama√±o actual de la DB: $dbSizeBeforeKB KB" -ForegroundColor Cyan

# Crear backup si no es modo test
if (-not $TestMode) {
    Write-Host ""
    Write-Host "Creando backup de seguridad..." -ForegroundColor Yellow
    try {
        Copy-Item $dbPath $backupPath
        Write-Host "‚úÖ Backup creado: $backupPath" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Error creando backup: $($_.Exception.Message)" -ForegroundColor Red
        $continue = Read-Host "¬øContinuar sin backup? (y/n)"
        if ($continue -ne 'y') {
            exit 1
        }
    }
}

# M√©todo 1: Usar la API del backend (recomendado)
Write-Host ""
Write-Host "M√©todo 1: Intentando optimizaci√≥n via API backend..." -ForegroundColor Yellow

$apiOptimizationSuccess = $false
try {
    # Verificar si el backend est√° corriendo
    $response = Invoke-RestMethod -Uri "http://localhost:5100/ping" -Method GET -TimeoutSec 5 -ErrorAction Stop
    
    if ($response.message -eq "pong") {
        Write-Host "‚úÖ Backend detectado en localhost:5100" -ForegroundColor Green
        
        # Intentar optimizaci√≥n via API
        $optimizeResponse = Invoke-RestMethod -Uri "http://localhost:5100/api/system/optimize" -Method POST -TimeoutSec 30 -ErrorAction Stop
        
        if ($optimizeResponse.message -match "successfully") {
            Write-Host "‚úÖ Optimizaci√≥n ejecutada exitosamente via API" -ForegroundColor Green
            $apiOptimizationSuccess = $true
        }
    }
} catch {
    Write-Host "‚ö†Ô∏è  Backend no disponible o error en API: $($_.Exception.Message)" -ForegroundColor Yellow
    Write-Host "   Intentando m√©todo alternativo..." -ForegroundColor Gray
}

# M√©todo 2: Ejecuci√≥n directa con dotnet ef (alternativo)
if (-not $apiOptimizationSuccess) {
    Write-Host ""
    Write-Host "M√©todo 2: Ejecutando optimizaci√≥n directamente..." -ForegroundColor Yellow
    
    Set-Location $backendPath
    
    try {
        # Leer el script de optimizaci√≥n
        $scriptContent = Get-Content $scriptPath -Raw
        Write-Host "üìÑ Script de optimizaci√≥n cargado ($($scriptContent.Length) caracteres)" -ForegroundColor Cyan
        
        # Dividir en comandos individuales
        $commands = $scriptContent -split ";\s*\r?\n" | Where-Object { 
            $_.Trim() -ne "" -and 
            -not $_.Trim().StartsWith("--") -and 
            -not $_.Trim().StartsWith("/*") 
        }
        
        Write-Host "üîß Ejecutando $($commands.Count) comandos de optimizaci√≥n..." -ForegroundColor Gray
        
        $successCount = 0
        $errorCount = 0
        
        foreach ($command in $commands) {
            $cleanCommand = $command.Trim()
            if ($cleanCommand -eq "") { continue }
            
            try {
                if ($Verbose) {
                    Write-Host "   Ejecutando: $($cleanCommand.Substring(0, [Math]::Min(50, $cleanCommand.Length)))..." -ForegroundColor DarkGray
                }
                
                # Aqu√≠ necesitar√≠as usar sqlite3.exe o una herramienta similar
                # Por simplicidad, mostraremos el comando pero no lo ejecutamos directamente
                if ($TestMode) {
                    Write-Host "   [TEST] Comando: $cleanCommand" -ForegroundColor DarkGray
                } else {
                    # En un escenario real, ejecutar√≠as algo como:
                    # sqlite3.exe $dbPath $cleanCommand
                    Write-Host "   ‚ö†Ô∏è  Comando requiere sqlite3.exe para ejecutar directamente" -ForegroundColor Yellow
                }
                
                $successCount++
            } catch {
                $errorCount++
                if ($Verbose) {
                    Write-Host "   ‚ùå Error en comando: $($_.Exception.Message)" -ForegroundColor Red
                }
            }
        }
        
        Write-Host "üìä Resumen: $successCount √©xitos, $errorCount errores" -ForegroundColor Cyan
        
    } catch {
        Write-Host "‚ùå Error ejecutando optimizaci√≥n directa: $($_.Exception.Message)" -ForegroundColor Red
    } finally {
        Set-Location ".."
    }
}

# Verificar resultado
Write-Host ""
Write-Host "Verificando resultado..." -ForegroundColor Yellow

$dbSizeAfter = (Get-Item $dbPath).Length
$dbSizeAfterKB = [math]::Round($dbSizeAfter / 1024, 2)
$sizeDiff = $dbSizeAfter - $dbSizeBefore
$sizeDiffKB = [math]::Round($sizeDiff / 1024, 2)

Write-Host "üìä Tama√±o despu√©s: $dbSizeAfterKB KB" -ForegroundColor Cyan
if ($sizeDiff -gt 0) {
    Write-Host "üìà Incremento: +$sizeDiffKB KB (normal, √≠ndices/vistas a√±adidas)" -ForegroundColor Green
} elseif ($sizeDiff -lt 0) {
    Write-Host "üìâ Reducci√≥n: $sizeDiffKB KB (optimizaci√≥n exitosa)" -ForegroundColor Green
} else {
    Write-Host "üìä Sin cambio de tama√±o" -ForegroundColor Gray
}

# An√°lisis del script aplicado
Write-Host ""
Write-Host "Analizando optimizaciones aplicadas..." -ForegroundColor Yellow
try {
    $scriptContent = Get-Content $scriptPath -Raw
    $indexCount = ($scriptContent -split "CREATE INDEX").Length - 1
    $viewCount = ($scriptContent -split "CREATE VIEW").Length - 1
    $triggerCount = ($scriptContent -split "CREATE TRIGGER").Length - 1
    $pragmaCount = ($scriptContent -split "PRAGMA").Length - 1
    
    Write-Host "‚úÖ Optimizaciones incluidas en el script:" -ForegroundColor Green
    Write-Host "   üìä √çndices: $indexCount" -ForegroundColor White
    Write-Host "   üëÅÔ∏è  Vistas: $viewCount" -ForegroundColor White
    Write-Host "   ‚ö° Triggers: $triggerCount" -ForegroundColor White
    Write-Host "   üîß Configuraciones PRAGMA: $pragmaCount" -ForegroundColor White
} catch {
    Write-Host "‚ö†Ô∏è  No se pudo analizar el contenido del script" -ForegroundColor Yellow
}

# Informaci√≥n adicional
Write-Host ""
Write-Host "=============================================" -ForegroundColor Green
Write-Host "‚úÖ OPTIMIZACI√ìN COMPLETADA" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Green

if (-not $TestMode -and (Test-Path $backupPath)) {
    Write-Host "üíæ Backup disponible en: $backupPath" -ForegroundColor Cyan
}

Write-Host ""
Write-Host "üîç Para verificar optimizaciones:" -ForegroundColor White
Write-Host "   ‚Ä¢ Revisa el rendimiento en el dashboard" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Las consultas deber√≠an ser m√°s r√°pidas" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Los reportes se cargar√°n m√°s eficientemente" -ForegroundColor Gray

Write-Host ""
Write-Host "‚ö†Ô∏è  Nota importante:" -ForegroundColor Yellow
Write-Host "   La optimizaci√≥n completa requiere que el backend est√© ejecut√°ndose" -ForegroundColor Gray
Write-Host "   para aplicar todos los comandos SQL correctamente." -ForegroundColor Gray

Write-Host ""
Write-Host "üöÄ Para aplicar optimizaci√≥n completa:" -ForegroundColor White
Write-Host "   1. cd backend && dotnet run" -ForegroundColor Cyan
Write-Host "   2. POST http://localhost:5100/api/system/optimize" -ForegroundColor Cyan
Write-Host "   O simplemente: .\reset-database.ps1 (incluye optimizaci√≥n)" -ForegroundColor Cyan
